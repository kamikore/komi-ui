@use 'function' as *;
@use 'config' as *;


// @forward 导入mixins同时引入了其他模块
@forward 'config';
@forward 'function';
@forward '_var';



// Scrollbar
@mixin scroll-bar {
  $scrollbar-thumb-background: #C9CCD0;
  $scrollbar-track-background: transparent;

  &::-webkit-scrollbar {
    z-index: 11;
    width: 4px;
    height: 20%;


    &:horizontal {
      height: 6px;
    }

    &-thumb {
      border-radius: 5px;
      width: 6px;
      background: $scrollbar-thumb-background;

      &:hover {
        opacity: 0.5;
      }
    }

    &-corner {
      background: $scrollbar-track-background;
    }

    &-track {
      background: $scrollbar-track-background;

      &-piece {
        background: $scrollbar-track-background;
        width: 6px;
      }
    }
  }
}


// BEM
// .ki-{$block}
@mixin b($block) {
    $B: $namespace + $common-separator + $block !global;
  
    .#{$B} {
      @content;
    }
}

// .{$B} __{$element}
@mixin e($element) {
  $E: $element !global;
  $selector: &;
  $currentSelector: '';
  @each $unit in $element {
    $currentSelector: #{$currentSelector +
      '.' +
      $B +
      $element-separator +
      $unit +
      ','};
  }

  @if hitAllSpecialNestRule($selector) {
    @at-root {
      #{$selector} {
        #{$currentSelector} {
          @content;
        }
      }
    }
  } @else {
    @at-root {
      #{$currentSelector} {
        @content;
      }
    }
  }
}

@mixin m($modifier) {
  $selector: &;
  $currentSelector: '';
  @each $unit in $modifier {
    $currentSelector: #{$currentSelector +
      $selector +
      $modifier-separator +
      $unit +
      ','};
  }

  @at-root {
    #{$currentSelector} {
      @content;
    }
  }
}
  

@mixin when($state) {
  @at-root {
    // 父元素.is-$state
    &.#{$state-prefix + $state} {
      @content;
    }
  }
}


