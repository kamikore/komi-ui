@use 'sass:map';
@use 'sass:math';
@use '../mixins/function.scss' as *;



$common-component-size: () !default;
$common-component-size: map.merge(
  (
    'large': 40px,
    'default': 32px,
    'small': 24px,
  ),
  $common-component-size
);


// types
$types: primary, success, warning, danger, error, info;


// Color 
$colors: () !default;
$colors: map.deep-merge(
  (
    'white': #ffffff,
    'black': #000000,
    'default': (
      'base': #ffffff,
    ),
    'primary': (
      'base': #000000,
    ),
    'success': (
      'base': #67c23a,
    ),
    'warning': (
      'base': #e6a23c,
    ),
    'danger': (
      'base': #f56c6c,
    ),
    'error': (
      'base': #f56c6c,
    ),
    'info': (
      'base': #909399,
    ),
  ),
  $colors
);

$color-white: map.get($colors, 'white') !default;
$color-black: map.get($colors, 'black') !default;
$color-black: map.get($colors, 'default','base') !default;
$color-primary: map.get($colors, 'primary', 'base') !default;
$color-success: map.get($colors, 'success', 'base') !default;
$color-warning: map.get($colors, 'warning', 'base') !default;
$color-danger: map.get($colors, 'danger', 'base') !default;
$color-error: map.get($colors, 'error', 'base') !default;
$color-info: map.get($colors, 'info', 'base') !default;


// mix colors with white/black to generate light/dark level
@mixin set-color-mix-level(
  $type,
  $number,
  $mode: 'light',
  $mix-color: $color-white
) {
  // merge "primary-light-1": #53a8ff
  $colors: map.deep-merge(
    (
      $type: (
        '#{$mode}-#{$number}': 
          mix(
            $mix-color,
            map.get($colors, $type, 'base'),
            math.percentage(math.div($number, 10))
          ),
      ),
    ),
    $colors
  ) !global;
}

// merge $color var
// $colors.primary.light-i
// --ki-color-primary-light-i
// 10% #53a8ff
// 20% #66b1ff
// 30% #79bbff
// 40% #8cc5ff
// 50% #a0cfff
// 60% #b3d8ff
// 70% #c6e2ff
// 80% #d9ecff
// 90% #ecf5ff
@each $type in $types {
  @for $i from 1 through 9 {
    @include set-color-mix-level($type, $i, 'light', $color-white);
  }
}

// --ki-color-primary-dark-2
@each $type in $types {
  @include set-color-mix-level($type, 2, 'dark', $color-black);
}


$text-color: () !default;
$text-color: map.merge(
  (
    'primary': #303133,
    'regular': #606266,
    'secondary': #909399,
    'placeholder': #a8abb2,
    'disabled': #c0c4cc,
    'white': #ffffff,
    'black': #000000,
  ),
  $text-color
);

$border-color: () !default;
$border-color: map.merge(
  (
    '': #dcdfe6,
    'light': #e4e7ed,
    'lighter': #ebeef5,
    'extra-light': #f2f6fc,
    'dark': #d4d7de,
    'darker': #cdd0d6,
    'hover': #000000,
  ),
  $border-color
);


$fill-color: () !default;
$fill-color: map.merge(
  (
    '': #f0f2f5,
    'light': #f5f7fa,
    'lighter': #fafafa,
    'extra-light': #fafcff,
    'dark': #ebedf0,
    'darker': #e6e8eb,
    'white': #ffffff,
    'black': #000000,
  ),
  $fill-color
);


// Background
$bg-color: () !default;
$bg-color: map.merge(
  (
    '': #ffffff,
    'page': #f2f3f5,
    'overlay': #ffffff,
  ),
  $bg-color
);



// Border
$border-width: 1px !default;
$border-style: solid !default;
$border-color-hover: getCssVar('text-color', 'disabled') !default;

$border-radius: () !default;
$border-radius: map.merge(
  (
    'small': 2px,
    'base': 4px,
    'large': 8px,
    'round': 20px,
    'circle': 100%,
  ),
  $border-radius
);


// Box-shadow
$box-shadow: () !default;
$box-shadow: map.merge(
  (
    '': (
      0px 12px 32px 4px rgba(0, 0, 0, 0.04),
      0px 8px 20px rgba(0, 0, 0, 0.08),
    ),
    'light': (
      0px 0px 12px rgba(0, 0, 0, 0.12),
    ),
    'lighter': (
      0px 0px 6px rgba(0, 0, 0, 0.12),
    ),
    'dark': (
      0px 16px 48px 16px rgba(0, 0, 0, 0.08),
      0px 12px 32px rgba(0, 0, 0, 0.12),
      0px 8px 16px -8px rgba(0, 0, 0, 0.16),
    ),
  ),
  $box-shadow
);



// Typography
$font-family: () !default;
$font-family: map.merge(
  (
    // default family
    '':
      "'Helvetica Neue', Helvetica, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', '微软雅黑', Arial, sans-serif"
  ),
  $font-family
);

// font-size
$font-size: () !default;
$font-size: map.merge(
  (
    'extra-large': 20px,
    'large': 18px,
    'medium': 16px,
    'base': 14px,
    'small': 13px,
    'extra-small': 12px,
  ),
  $font-size
);


// padding
$padding:() !default;
$padding: map.merge(
  (
    'small': 4px,
    'default': 8px,
    'large': 12px,
  ),
  $padding
);

// margin
$margin:() !default;
$margin: map.merge(
  (
    'small': 0.25rem,
    'default': 0.5rem,
    'large': 1rem,
  ),
  $margin
);



// z-index
$zIndex: () !default;
$zIndex: map.merge(
  (
    'normal': 1,
    'bottom': -1,
    'top': 1000,
    'popper': 2000,
  ),
  $zIndex
);

// Disable default
$disabled: () !default;
$disabled: map.merge(
  (
    'bg-color': getCssVar('fill-color', 'light'),
    'text-color': getCssVar('text-color', 'placeholder'),
    'border-color': getCssVar('border-color', 'light'),
  ),
  $disabled
);

// Input
// css3 var in packages/theme/src/input.scss
$input: () !default;
$input: map.merge(
  (
    'text-color': getCssVar('text-color-regular'),
    'border': 2px solid,
    'transparent-border': 0 0 0 1px transparent inset,
    'border-color': getCssVar('border-color'),
    'border-radius': getCssVar('border-radius-base'),
    'bg-color': getCssVar('fill-color', 'blank'),
    'icon-color': getCssVar('text-color-placeholder'),
    'placeholder-color': getCssVar('text-color-placeholder'),
    'hover-border-color': getCssVar('border-color','hover'),
    'clear-hover-color': getCssVar('text-color-secondary'),
    'focus-border-color': getCssVar('border-color','hover'),
  ),
  $input
);

$input-disabled: () !default;
$input-disabled: map.merge(
  (
    'fill': getCssVar('disabled-bg-color'),
    'border': getCssVar('disabled-border-color'),
    'text-color': getCssVar('disabled-text-color'),
    'placeholder-color': getCssVar('text-color-placeholder'),
  ),
  $input-disabled
);

$input-font-size: () !default;
$input-font-size: map.merge(
  (
    'large': 14px,
    'default': 14px,
    'small': 12px,
  ),
  $input-font-size
);

$input-height: () !default;
$input-height: map.merge($common-component-size, $input-height);

$input-line-height: () !default;
$input-line-height: map.merge($common-component-size, $input-line-height);

$input-number-width: () !default;
$input-number-width: map.merge(
  (
    'large': 180px,
    'default': 150px,
    'small': 120px,
  ),
  $input-number-width
);

$input-padding-horizontal: () !default;
$input-padding-horizontal: map.merge(
  (
    'large': 16px,
    'default': 12px,
    'small': 8px,
  ),
  $input-padding-horizontal
);



// Button
// css3 var in packages/theme/src/button.scss
$button: () !default;
$button: map.merge(
  (
    'font-weight': getCssVar('font-weight-primary'),
    'border-color': getCssVar('border-color'),
    'bg-color': getCssVar('fill-color', 'white'),
    'text-color': getCssVar('text-color', 'black'),
    'disabled-border-color': getCssVar('border-color-light'),
    'divide-border-color': rgba($color-white, 0.5),
    'hover-text-color': getCssVar('color-primary'),
    'hover-bg-color': getCssVar('color-primary', 'light-9'),
    'hover-border-color': getCssVar('color-primary-light-7'),
    'active-text-color': getCssVar('button-hover-text-color'),
    'active-border-color': getCssVar('color-primary'),
    'active-bg-color': getCssVar('button', 'hover-bg-color'),
    'outline-color': getCssVar('color-primary', 'light-5'),
    'hover-link-text-color': getCssVar('color-info'),
    'active-color': getCssVar('text-color', 'primary'),
  ),
  $button
);


$button-border-radius: () !default;
$button-border-radius: map.merge(
  (
    'large': getCssVar('border-radius', 'base'),
    'default': getCssVar('border-radius', 'base'),
    'small': calc(#{getCssVar('border-radius', 'base')} - 1px),
  ),
  $button-border-radius
);


$button-disabled-bg-color: () !default;
$button-disabled-bg-color: map.merge(
  (
    'default': getCssVar('fill-color', 'blank'),
    'primary': getCssVar('color','primary','light-5'),
  ),
  $button-disabled-bg-color
);

$button-disabled-text-color: () !default;
$button-disabled-text-color: map.merge(
  (
    'default': getCssVar('disabled-text-color'),
    'primary': getCssVar('text-color', 'white')
  ),
  $button-disabled-text-color
);



// Popover
// css3 var in packages/theme/src/popover.scss
$popover: () !default;
$popover: map.merge(
  (
  ),
  $popover
);


$popover-font-size: () !default;
$popover-font-size: map.merge(
  (
    'large': 16px,
    'default': 14px,
    'small': 12px,
  ),
  $popover-font-size
);


$popover-padding: () !default;
$popover-padding: map.merge(
  (
    'large': getCssVar('padding') getCssVar('padding','large'),
    'default': getCssVar('padding','small') getCssVar('padding'),
    'small': getCssVar('padding','small') getCssVar('padding'),
  ),
  $popover-padding
);



// Radio
// css3 var in packages/theme/src/radio.scss
$radio: () !default;
$radio: map.merge(
  (
    'font-size': getCssVar('font-size-base'),
    'text-color': getCssVar('text-color-regular'),
    'font-weight': getCssVar('font-weight-primary'),
    'input-height': 16px,
    'input-width': 16px,
    'input-border': 2px solid,
    'input-border-color': getCssVar('border-color','dark'),
    'input-border-color-hover': getCssVar('border-color','hover'),
  ),
  $radio
);


$radio-font-size: () !default;
$radio-font-size: map.merge(
  (
    'large': getCssVar('font-size','large'),
    'default': getCssVar('font-size','medium'),
    'small': getCssVar('font-size','base'),
  ),
  $radio-font-size
);

$radio-checked-border: () !default;
$radio-checked-border: map.merge(
  (
    'large': 7px solid,
    'default': 6px solid,
    'small': 5px solid,
  ),
  $radio-checked-border
);



// checkbox
// css3 var in packages/theme/src/checkbox.scss
$checkbox: () !default;
$checkbox: map.merge(
  (
    'font-size': getCssVar('font-size-base'),
    'text-color': getCssVar('text-color-white'),
    'font-weight': 200,
    'input-border': 2px solid,
    'input-border-color': getCssVar('border-color','dark'),
    'input-border-color-hover': getCssVar('border-color','hover'),

    'checked-input-border-color': getCssVar('color','black'),
    'checked-bg-color': getCssVar('color','black'),
    'checked-icon-color': getCssVar('color', 'white'),

    'toggle-input-height': 12px,
    'toggle-input-width': 12px,
    'toggle-track-height': 8px,
    'toggle-track-width': 24px,
  ),
  $radio
);


$checkbox-font-size: () !default;
$checkbox-font-size: map.merge(
  (
    'large': getCssVar('font-size','large'),
    'default': getCssVar('font-size','medium'),
    'small': getCssVar('font-size','base'),
  ),
  $checkbox-font-size
);

$checkbox-inset: () !default;
$checkbox-inset: map.merge(
  (
    'large': 0 0 0 4px,
    'default': 1px 0 0 4px,
    'small': 0 0 0 3px,
  ),
  $checkbox-inset
);

$checkbox-icon-height: () !default;
$checkbox-icon-height: map.merge(
  (
    'large': 9px,
    'default': 7px,
    'small': 6px,
  ),
  $checkbox-icon-height
);

$checkbox-icon-width: () !default;
$checkbox-icon-width: map.merge(
  (
    'large': 4px,
    'default': 3px,
    'small': 2px,
  ),
  $checkbox-icon-width
);


$checkbox-track-width: () !default;
$checkbox-track-width: map.merge(
  (
      'large': 32px,
      'default': 24px,
      'small': 16px,
  ),
  $checkbox-track-width
);

$checkbox-track-height: () !default;
$checkbox-track-height: map.merge(
  (
      'large': 14px,
      'default': 12px,
      'small': 10px
  ),
  $checkbox-track-height
);

$checkbox-track-radius: () !default;
$checkbox-track-radius: map.merge(
  (
      'large': 8px,
      'default': 6px,
      'small': 4px
  ),
  $checkbox-track-radius
);


$checkbox-toggle-radius: () !default;
$checkbox-toggle-radius: map.merge(
  (
      'large': 18px,
      'default': 16px,
      'small': 12px
  ),
  $checkbox-toggle-radius
);




// menu-item
// css3 var in packages/theme/src/menu-item.scss
$menu-item-font-size: () !default;
$menu-item-font-size: map.merge(
  (
      'large': 16px,
      'default': 14px,
      'small': 12px
  ),
  $menu-item-font-size
);